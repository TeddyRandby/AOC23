:use .records
:use .strings
:use .streams
:use .lists
:use .io

def read_input(name)
  s, file = :io.open(name, 'r')

  s == .ok or s:panic

  s, content = file:read

  s == .ok or s:panic

  content
end

def partoneexample = "
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"

def partone = read_input("partone.txt")

def parttwoexample = "
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"

def Game { id, blue, red, green }

def <= [Game](other)
  self:blue  <= other:blue and
  self:red   <= other:red  and
  self:green <= other:green
end

# Convert a string into a game
def to_maxgame[.String]
  title, strgame = self:take(&:split, ':', 2)
  title, strgame = title[0], strgame[0]

  id = title:slice(5, title:len):to_n

  def game = {
    id,
    blue  = 0,
    red   = 0,
    green = 0
  }

  strgame:for(&:split ,';') do (subgame)
    subgame:for(&:split, ',') do (count_and_color)
      count, color = count_and_color:take(&:split, ' ', 2)

      count = count[0]:to_n
      color = color[0]

      game[color] < count then
        game[color] = count
      end
    end
  end

  game
end

def part_one_totals = { red = 12, green = 13, blue = 14 }

def part_one(input)
  input:fold(&:split, '\n', 0) do (sum, line)

    game = line:to_maxgame

    sum + (game <= part_one_totals and game:id or 0)
  end
end

def power[Game]
  self:red * self:green * self:blue
end

def part_two(input)
  input:fold(&:split, '\n', 0) do (sum, line)

    game = line:to_maxgame

    sum + game:power
  end
end

sum = part_one(partoneexample)

'day two part one example: {sum}' :print

sum = part_one(partone)

'day two part one: {sum}' :print

sum = part_two(parttwoexample)
'day two part two example: {sum}' :print 

sum = part_two(partone)
'day two part two: {sum}' :print 
