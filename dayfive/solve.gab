:use .records
:use .strings
:use .streams
:use .io
:use .lists
:use .maps

def read_input(name)
  s, file = :io.open(name, 'r')

  s == .ok or s:panic

  s, content = file:read

  s == .ok or s:panic

  content
end

def partoneexample = read_input('partoneexample.txt')

def partone = read_input('partone.txt')

def REALLYBIGNUMBER = 9999999999999

def min[.List]
  self:fold(&:each, REALLYBIGNUMBER) do (sofar, next)
    next < sofar and next or sofar
  end
end


## Useful types
def Mapping { src, dst, len }

def AlmanacMap { src_type, dst_type, mappings }

def Range { begin, len }

def nil_range = { begin = REALLYBIGNUMBER, len = 0 }

def AlmanacGraph { seeds, srcmap, dstmap, work_queue, done_list }

def begin[.Number]; self end

def to_b[Range]; self:len > 0 end

def <[Range](other); self:begin < other:begin end

## Transform strings into our useful types
def to_mapping[.String]
  def dst, src, len = self:take(&:split, ' ', 3)

  { src = src:to_n, dst = dst:to_n, len = len:to_n }
end

def to_almanacmap[.String]
  def lines = self:list.collect(&:split, '\n')

  def title = lines[0]:take(&:split, ' ', 1)
  def src_type, _, dst_type = title:take(&:split, '-', 3)

  def mappings = :tuple.new(lines:len - 1)

  i, done = 1, lines:len
  i < done and loop
    mappings[i - 1] = lines[i]:to_mapping
    i = i + 1
  until i == done end

  { src_type, dst_type, mappings }
end

def to_almanacgraph[.String]
  def groups = self:list.collect(&:split, '\n\n', 1)

  _, seed_string = groups[0]:take(&:split, ':', 2)
  def seeds = seed_string:list.collect(&:map, &:split, ' ') do; @1:to_n end

  def am_groups = :tuple.new(groups:len - 1)

  i, done = 1, groups:len
  loop
    am_groups[i - 1] = groups[i]:to_almanacmap
    i = i + 1
  until i == done end

  def srcmap = am_groups:fold(&:values, :map.new) do (srcmap, am)
    srcmap:put!(am:src_type, am)
  end

  def dstmap = am_groups:fold(&:values, :map.new) do (dstmap, am)
    dstmap:put!(am:dst_type, am)
  end

  { seeds, srcmap, dstmap, work_queue = :list.new, done_list = :list.new }
end

## These are the only two actual business methods

def in_map?[.Number](map)
  def bottom, top = map:src, map:src + map:len

  bottom < self and self < top then
# Woohoo! This mapping contains our needle.
# Map the source value to a destination value.
    diff = self - bottom
    return map:dst + diff
  end
end

def in_bounds?[.Number](bottom, top)
  self >= bottom and self < top
end

def in_bounds?[Range](bottom, top)
  self:len > 0 or return

  e = self:begin + self:len

  b_in, e_in = self:begin:in_bounds?(bottom, top), e:in_bounds?(bottom, top)

  b_in and e_in and return .inside

  b_in and return .rhs

  e_in and return .lhs

  self:begin < bottom and e > top and return .around
end

def in_map?[nil]; nil end

def in_map?[Range](map)
  self:len > 0 or return

  def bottom, top = map:src, map:src + map:len

  pos = self:in_bounds?(bottom, top) in then
# Woohoo! This mapping contains our needle.
# Map the source value to a destination value.
    def bottom_edge, top_edge = :num.max(bottom, self:begin), :num.min(self:begin + self:len, top)

    def begin_offset = :num.max(self:begin - bottom, 0)
    def begin_in = map:dst + begin_offset
    def len_in = top_edge - (bottom_edge)

    def out_a, out_b = pos :match {
      lhs = do
        len = self:len - len_in
        len > 0 and { begin = self:begin, len } or nil
      end,
      rhs = do
        len = self:len - len_in 
        len > 0 and { begin = top, len } or nil
      end,
      around = do
        # This splits into two outside ranges
        len_lhs = bottom - self:begin
        len_rhs = self:len - len_in - len_lhs
        lhs = len_lhs > 0 and { begin = self:begin, len = len_lhs } or nil
        rhs = len_rhs > 0 and { begin = top, len = len_rhs } or nil
        return lhs, rhs 
      end,
      inside = do
        nil
      end
    }

    return { begin = begin_in, len = len_in }, out_a, out_b
  end
end

def follow_value[AlmanacMap](v)
  def unmatched = :list.new:push!(v)

  vs = self:mappings:list.collect(
    &:filter,
    &:flatmap,
    &:values,
    do (map)
# As we check every mapping, keep a list of matched and unmatched ranges.
# Update our list of unmatched ranges to check as we loop through - 
# Every time we match a range, we get up to one matched range and up to two unmatched ranges.
      acc = unmatched:fold(&:each) { matched = :list.new, unmatched = :list.new } do (acc, v, i)
        range_in, range_outa, range_outb = v:in_map?(map)

        range_in then
          acc:matched:push!(range_in)
# The range we just matched against should be removed from the unmatched list
          unmatched:put!(i, nil_range)
        end

        range_outa and acc:unmatched:push!(range_outa)

        range_outb and acc:unmatched:push!(range_outb)

        acc
      end

# If we have any unmatched ranges, replace the list of ranges to look for.
      acc:unmatched:empty? or unmatched:replace!(acc:unmatched)

# Return all the matches we found in this mapping
      acc:matched:splat
    end,
    &:to_b,
  )

# Push all our unmatched ranges, as they pass straigh through
  vs:push!(unmatched:splat)
end

def empty?[AlmanacGraph]
  self:work_queue:empty?
end

def queue![AlmanacGraph](*jobs)
  self:work_queue:push!(jobs:splat)
end

def work![AlmanacGraph]
  loop; self:follow_next until self:empty? end
end

def follow_next[AlmanacGraph]
  job = self:work_queue:pop!
  self:follow_value(job:splat)
end

# Follow a seed through a mapping until we reach a desired destination type
def follow_value[AlmanacGraph](v, src_type)
  # Get the almanac map which has source of <st>
  def am = self:srcmap[src_type]
  # Follow the current value through this map 
  def vs = am:follow_value(v)

  # If we reached the location dst, type, we're done and can add our results
  # to the done list. ( this could be cheaper if we just keep the minimum found so far)
  am:dst_type == .location then
    self:done_list:push!(vs:splat)
  end else
  # Otherwise, queue new jobs to follow each of our ranges through the next map
    vs:for(&:each) do (seed)
      self:queue! { seed, src_type = am:dst_type }
    end
  end
end

def solve[AlmanacGraph](jobs)
  self:queue!(jobs:splat)

  self:work!

  self:done_list:min:begin
end

def part_one(input)
  def g = input:to_almanacgraph

  def jobs = g:seeds:list.collect(&:map, &:each) do (seed)
    { seed, src_type = .seed }
  end

  g:solve(jobs)
end

def part_two(input)
  def g = input:to_almanacgraph

  def jobs = g:seeds:list.collect(
    &:map,
    &:partition,
    &:each,
    2,
    do (begin, len); { seed = { begin, len }, src_type =  .seed } end,
  )

  g:solve(jobs)
end

def result = part_one(partoneexample)
'day five part one example: {result}':print

def result = part_one(partone)
'day five part one {result}':print

def result = part_two(partoneexample)
'day five part two example: {result}':print

def result = part_two(partone)
'day five part two: {result}':print
