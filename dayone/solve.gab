:use .records
:use .strings
:use .streams
:use .io

def read_input(name)
  s, file = :io.open(name, 'r')

  s == .ok or s:panic

  s, content = file:read

  s == .ok or s:panic

  content
end

partoneexample = "1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet"
partone = read_input("partone.txt") 

parttwoexample = "two1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen"
parttwo = read_input("parttwo.txt")

def first_digit(line, msg)
  line:first(msg) do (char)
    ascii = char:to_byte
    ascii >= 48 and ascii <= 57 then
      return .some, char
    end

    return .none
  end
end

def part_one(input)
  input:fold(&:split, '\n', 0) do (sum, line)

    _, front = first_digit(line, &:chars)
    _, back = first_digit(line, &:rchars)

    sum + (front + back in :to_n)
  end
end

def digitwords = {
  .one   = "1",
  .two   = "2",
  .three = "3",
  .four  = "4",
  .five  = "5",
  .six   = "6",
  .seven = "7",
  .eight = "8",
  .nine  = "9",
  ["1"]  = "1",
  ["2"]  = "2",
  ["3"]  = "3",
  ["4"]  = "4",
  ["5"]  = "5",
  ["6"]  = "6",
  ["7"]  = "7",
  ["8"]  = "8",
  ["9"]  = "9",
}

def first_digitword(line, msg, word_checker)
  line:first(msg) do (char, i)
    digitwords:first(&:keys) do (word)
      word:(word_checker)(line, i) then
        return .some, word
      end else
        return .none
      end
    end
  end
end

def part_two(input)
  input:fold(&:split, '\n', 0) do (sum, line)

    _, front = first_digitword(line, &:chars, &:begins?)
    _, back = first_digitword(line, &:rchars, &:ends?)

    front = digitwords[front]
    back = digitwords[back]

    sum + (front + back in :to_n)
  end
end

sum = part_one(partoneexample)
'day one part one example: {sum}' :print 

sum = part_one(partone)
'day one part one: {sum}' :print 

sum = part_two(parttwoexample)
'day one part two example: {sum}' :print 

sum = part_two(partone)
'day one part two: {sum}' :print 
